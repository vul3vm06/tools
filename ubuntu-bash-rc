# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

aroot()
{
  [[ $(adb shell id -u -n) != "root"* && $(adb shell id -u -n) != "uid=0(root)"* ]] && adb root || echo "Already root. skip"
}

adbsetup()
{
  adb wait-for-device; sleep 3; adb root; sleep 3; adb remount; adb logcat -G 256K; adb shell date `date +%m%d%H%M%Y.%S`;
}

#export NSPR_LOG_MODULES=AlarmManager:5,AlarmManagerWorker:5
export NSPR_LOG_MODULES=SystemMessageService:5,AlarmManager:5,XX:5
#export NSPR_LOG_MODULES=SystemMessageService:5,WebActivity:5,WebActivityWorker:5
#export NSPR_LOG_MODULES=HelperAppService:5
#export NSPR_LOG_MODULES=Focus:5,IME:5
export MOZ_LOG=timestamp,$NSPR_LOG_MODULES
adblogon()
{
  adb shell stop b2g
  adb shell stop api-daemon
  adb shell setprop kaios.log.enable 1
  adb shell setprop kaios.log.filter $NSPR_LOG_MODULES
  adb shell start api-daemon
  adb shell start b2g
}

adate()
{
  aroot;
  adb shell date `date +%m%d%H%M%Y.%S`;
  adb shell hwclock -w;
}

gp()
{
  if [[ -f "$@" ]]; then
    echo "Warning: At least one file matches the wildcard, use grep --color=auto -Inr --exclude=tags --exclude-dir={*.git,dist,generated,node_modules,target,obj*,forks} instead."
  else
    unbuffer grep --color=auto -Inr --exclude=tags --exclude-dir={*.git,dist,generated,node_modules,target,obj*,forks} "$@" | cut -c1-300
  fi
}

findn()
{
  if [[ -f "$@" ]]; then
    echo "Warning: At least one file matches the wildcard, use find . -name \"FILENAME\" instead."
  else
    find . -name "$@"
  fi
}

cclogon()
{
  export MOZ_CC_LOG_DIRECTORY=~/temp/cc
  export MOZ_CC_LOG_SHUTDOWN=1
  export MOZ_DISABLE_CONTENT_SANDBOX=t
  export MOZ_CC_ALL_TRACES=shutdown
  export MOZ_CC_LOG_THREAD=main
  export XPCOM_MEM_LEAK_LOG=1
}

alias vi="vim -p"
# use ctags --languages=c,c++,python,sh,js -R --exclude=.git --exclude=obj* .
# ctags --langmap=C++:.c.h.cpp.idl.hxx.hpp.webidl --langmap=JavaScript:.js.jsm --langmap=js:.js.jsm --languages=c,c++,python,sh,js -R --exclude=.git --exclude=obj* .
alias to="source /mnt/md0/to"
alias acharge="aroot; adb shell \"echo 0 > /sys/class/power_supply/battery/stop_charge\""
alias adv="while true; do adb devices; date; sleep 2; done"
alias adw="adb wait-for-device"
alias alogcat="adb logcat -v threadtime /system/bin/fakesurfaceflinger:S /system/bin/sdcard:S ADB_SERVICES:S ADebug:S Adreno-EGL:S Compositor:S EventHub:S FBI:S HWComposerSurface:S HwcPassthrough:S LOWI-8.6.0.81:S LocSvc_BatteryListener:S QC-QMI:S ResolverController:S SDM:S Sensors:S ServiceManagement:S SurfaceFlinger:S VM_BMS:S VendorServiceManager:S VolumeManager:S WifiHAL:S b2gkillerd:S chatty:S crash_dump32:S cutils:S hw-IPCThreadState:S init:S kauth:S libEGL:S libc:S linker:S propClient:S qdlights:S sdcard:S telemetry:S thermal_repeater:S vendor.qti.hardware.factory@1.0-impl:S vm_bms:S vndksupport:S vold:S wpa_supplicant:S"
alias alogcats="adb logcat -s"
alias alogc="adb logcat -c"
alias aremount="adb shell \"mount -o rw,remount /system\""
alias ashell="aroot && adb shell"
alias unbuffer='unbuffer '
alias macheslint="LC_ALL=\"en_US.UTF-8\" ./mach lint -l eslint --fix"
#export PS1="\[\033[38;5;48m\]\u@\h \t \w $ \[$(tput sgr0)\]\[\033[38;5;15m\]"
export PS1="\[\033[38;5;39m\]\u@\h \t \w $ \[$(tput sgr0)\]\[\033[38;5;15m\]"
#export LC_ALL=C
export LC_ALL=C.UTF-8
export LC_CTYPE=en_US.UTF-8
export CLICOLOR=true
export PATH="$HOME/depot_tools:$PATH"
# dirty hack to lock node version
# export PATH="$HOME/Downloads/node-v8.9.3-linux-x86/bin:$PATH"

# export NO_NETWORK=1
# export NO_BUNDLE=1
# export DISABLE_SOURCES_XML=true
# export OFFLINE=1
# export VARIANT=userdebug
# export B2G_DEBUG=1

export LOCAL_NDK_BASE_URL='ftp://ftp.kaiostech.com/ndk/android-ndk'
export ANDROID_NDK=$HOME/.mozbuild/android-ndk-r20b-canary

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

export MINIDUMP_STACKWALK=/mnt/md0/google-breakpad/src/processor/minidump_stackwalk
cclogon
